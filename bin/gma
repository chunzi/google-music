#!/usr/bin/env perl
use strict;
use Google::Music::Album;
use Path::Class;
use YAML::Syck;
binmode STDERR, ':utf8';

my $which = shift;
my $album = ( $which =~ /http/ )
                ? Google::Music::Album->new_from_url( $which )
                : Google::Music::Album->new( $which );
die "usage: $0 url|id\n" unless $album;


printf STDERR "fetching album informations...\n";
$album->parse;


my $dir = dir( $album->dirname )->absolute;
printf STDERR "creating album dir: %s\n", $dir;
-d $dir or $dir->mkpath;


printf STDERR "saving meta.yaml file...\n";
my $meta;
$meta->{'google_album_id'} = $album->id;
$meta->{'album'} = $album->name;
$meta->{'artist'} = $album->artist;
$meta->{'year'} = $album->year;
$meta->{'genre'} = undef;
$meta->{'songs'} = [
    map {{
        'google_song_id' => $_->id, 
        'track' => $_->track,
        'title' => $_->title,
        'filename' => $_->filename,
    }} @{$album->songs}
];
DumpFile( $dir->file('meta.yaml'), $meta );


printf STDERR "downloading cover.jpg...\n";
$album->download_file( $album->cover, $dir->file('cover.jpg') );


foreach my $song ( sort { $b->track <=> $a->track } @{$album->songs} ){
    my $path = $dir->file( $song->filename );
    if ( -f $path ){
        my $size = -s $path;
        if ( $size < 102400 ){ # less than 100KB
            my $mb = sprintf "%.1fMB", $size / 1024 / 1024;
            printf STDERR "exists %s (%s)\n", $path->basename, $mb;
            next;
        }
    }

    printf STDERR "downloading %s...\n", $path->basename;
    my $url = $song->download_url;
    $song->download_file($url, $path);
}

exit;

